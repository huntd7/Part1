
Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00800100  0000095e  000009f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800402  00800402  00000cf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001382  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097a  00000000  00000000  00002aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00003428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000496  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000616  00000000  00000000  00003a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 ad 04 	jmp	0x95a	; 0x95a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uartInit>:
//set a common baud rate of 1200, 2400, 4800, 9600, 19200, 38400, or 57600, if not specified correctly, default is 9600.
//set mode based on: 1 sets double speed synchronous, 2 sets asynchronous, default is regular speed asynchronous
//set interrupt to 1 if interrupt needed
void uartInit(unsigned int baudrate, unsigned char Mode, unsigned char interrupted)
{	
	DDRD |= (1<<PORTD1);		//set RXD pin as input
  a6:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<PORTD0);		//set TXD pin as output
  a8:	50 98       	cbi	0x0a, 0	; 10
			#define BAUD 9600
		break;
	}
	#include <util/setbaud.h>

	UBRR0H = UBRRH_VALUE;
  aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	switch (Mode){
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	19 f0       	breq	.+6      	; 0xbe <uartInit+0x18>
  b8:	62 30       	cpi	r22, 0x02	; 2
  ba:	39 f0       	breq	.+14     	; 0xca <uartInit+0x24>
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <uartInit+0x30>
		case 1:			//double speed Asynchronous
			UCSR0A |= (1<<U2X0);
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
			break;
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <uartInit+0x3a>

		case 2:			//synchronous
			UCSR0C |= (1<<UMSEL00);
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
			break;
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <uartInit+0x3a>

		default:		//regular speed Asynchronous
			UCSR0A &= ~(1<<U2X0);
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8d 7f       	andi	r24, 0xFD	; 253
  de:	80 83       	st	Z, r24
			break;
	}

	if (interrupted)
  e0:	44 23       	and	r20, r20
  e2:	29 f0       	breq	.+10     	; 0xee <uartInit+0x48>
		UCSR0B |= (1<<RXCIE0);	//set receive interrupts
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);		//setup pins for transmit and receive
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);	//8 bit character size
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <GetChar>:
/*9. Function similar to Getchar
(essentially pulling the UDR0 register's data during receive mode).*/

unsigned char GetChar()
{
	while (!(UCSR0A & (1<<RXC0)));
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	ec f7       	brge	.-6      	; 0x108 <GetChar+0x4>
    return UDR0;
 10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 112:	08 95       	ret

00000114 <PutChar>:

/*10. Function similar to putchar.*/

void PutChar(unsigned char data)
{
    while (!(UCSR0A & (1<<UDRE0)));
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	95 ff       	sbrs	r25, 5
 11c:	fd cf       	rjmp	.-6      	; 0x118 <PutChar+0x4>
    UDR0 = data;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 122:	08 95       	ret

00000124 <printm>:
}

/*11. A string print called printm that uses a char array and your putchar clone to transmit strings.*/

void printm(char *output)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	fc 01       	movw	r30, r24
    char i = 0;
    while(*(output + i) != '\0'){
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	59 f0       	breq	.+22     	; 0x148 <printm+0x24>
 132:	8f 01       	movw	r16, r30
 134:	c0 e0       	ldi	r28, 0x00	; 0
        PutChar(*(output + i));
 136:	0e 94 8a 00 	call	0x114	; 0x114 <PutChar>
        i++;
 13a:	cf 5f       	subi	r28, 0xFF	; 255
/*11. A string print called printm that uses a char array and your putchar clone to transmit strings.*/

void printm(char *output)
{
    char i = 0;
    while(*(output + i) != '\0'){
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	81 11       	cpse	r24, r1
 146:	f7 cf       	rjmp	.-18     	; 0x136 <printm+0x12>
        PutChar(*(output + i));
        i++;
    }
}
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <scanm>:

/*12. A function called scanm that uses an uninitialized char array and your getchar clone to construct a string for your atmega.
Note you may have to use some kind of end of line or end of file token.*/
//must have declared size of buffer is calling routine
void scanm(unsigned char* buffer)
	{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
		int i = 0;
		while(buffer[i] != '\n'){
 158:	fc 01       	movw	r30, r24
 15a:	20 81       	ld	r18, Z
 15c:	2a 30       	cpi	r18, 0x0A	; 10
 15e:	71 f0       	breq	.+28     	; 0x17c <scanm+0x2c>
 160:	ec 01       	movw	r28, r24
 162:	8e 01       	movw	r16, r28
			buffer[i] = GetChar();
 164:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
 168:	89 93       	st	Y+, r24
			if (buffer[i]=='\r')
 16a:	8d 30       	cpi	r24, 0x0D	; 13
 16c:	41 f0       	breq	.+16     	; 0x17e <scanm+0x2e>
				break;
			PutChar(buffer[i]);
 16e:	0e 94 8a 00 	call	0x114	; 0x114 <PutChar>
Note you may have to use some kind of end of line or end of file token.*/
//must have declared size of buffer is calling routine
void scanm(unsigned char* buffer)
	{
		int i = 0;
		while(buffer[i] != '\n'){
 172:	8e 01       	movw	r16, r28
 174:	88 81       	ld	r24, Y
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	a1 f7       	brne	.-24     	; 0x162 <scanm+0x12>
 17a:	01 c0       	rjmp	.+2      	; 0x17e <scanm+0x2e>
 17c:	8c 01       	movw	r16, r24
			if (buffer[i]=='\r')
				break;
			PutChar(buffer[i]);
			i++;
		}
		buffer[i] = '\0';
 17e:	f8 01       	movw	r30, r16
 180:	10 82       	st	Z, r1
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <__vector_3>:
#include "states.h"
#include "ioe.h"

//On and Off button ISR
ISR (PCINT0_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
}
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <main>:

int main(void)
{
	DDRD = 0x00;				//PORTD6 as output
 1a0:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0b0000100;			//PORTB2 as output, others input
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	84 b9       	out	0x04, r24	; 4

	PCMSK0 |= (1<<onButtINT);	//set off button interrupt mask
 1a6:	eb e6       	ldi	r30, 0x6B	; 107
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);		//enable pin interrupts
 1b0:	e8 e6       	ldi	r30, 0x68	; 104
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	80 83       	st	Z, r24

	//fast PWM with 0xFF as top, non-inverting mode, no prescaler
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 1ba:	84 b5       	in	r24, 0x24	; 36
 1bc:	83 68       	ori	r24, 0x83	; 131
 1be:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 230;	//set 90% duty cycle
 1c6:	86 ee       	ldi	r24, 0xE6	; 230
 1c8:	87 bd       	out	0x27, r24	; 39

	uartInit(9600, 0, 0);		//initialize uart with 9600 baud, normal mode, recieve interrupts on.
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	95 e2       	ldi	r25, 0x25	; 37
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <uartInit>
	
	sei();
 1d6:	78 94       	sei

	state= mainMenu;			//set to main Menu
 1d8:	88 ef       	ldi	r24, 0xF8	; 248
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 1e0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
    while (1){
		(*state)();				//begin state machine
 1e4:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <__data_end>
 1e8:	f0 91 03 04 	lds	r31, 0x0403	; 0x800403 <__data_end+0x1>
 1ec:	09 95       	icall
    }
 1ee:	fa cf       	rjmp	.-12     	; 0x1e4 <main+0x44>

000001f0 <mainMenu>:

void mainMenu()	//main menu
{
	unsigned char mm;	//main menu choice

	printm("\n\rMain Menu:");	//print main menu
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<a> Hello World!");
 1f8:	83 e1       	ldi	r24, 0x13	; 19
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<s> Sleep options");
 200:	87 e2       	ldi	r24, 0x27	; 39
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<d> LED control");
 208:	8c e3       	ldi	r24, 0x3C	; 60
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 92 00 	call	0x124	; 0x124 <printm>

	mm = GetChar();		//get main menu choice
 210:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (mm){
 214:	84 36       	cpi	r24, 0x64	; 100
 216:	81 f0       	breq	.+32     	; 0x238 <mainMenu+0x48>
 218:	83 37       	cpi	r24, 0x73	; 115
 21a:	39 f0       	breq	.+14     	; 0x22a <mainMenu+0x3a>
 21c:	81 36       	cpi	r24, 0x61	; 97
 21e:	99 f4       	brne	.+38     	; 0x246 <mainMenu+0x56>
		case 'a':
			printm("\n\rHello World!\n");	//print "Hello World!
 220:	8f e4       	ldi	r24, 0x4F	; 79
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			break;
 228:	08 95       	ret
		case 's':
			state = sleepOptions;	//goto sleep options menu
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 232:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 236:	08 95       	ret
		case 'd':
			state = LEDControl;		//goto LED options menu
 238:	86 e8       	ldi	r24, 0x86	; 134
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 240:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 244:	08 95       	ret
		default:
			printm("\n\rError, not an available option\n");	//print error
 246:	8f e5       	ldi	r24, 0x5F	; 95
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 92 00 	call	0x124	; 0x124 <printm>
 24e:	08 95       	ret

00000250 <sleepOptions>:

void sleepOptions()	//sleep menu
{
	unsigned char sleep;	//sleep choice

	printm("\n\rSleep Options:");	//print sleep menu
 250:	81 e8       	ldi	r24, 0x81	; 129
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<1> Sleep");
 258:	82 e9       	ldi	r24, 0x92	; 146
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<2> Power down");
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<m> Main menu");
 268:	81 eb       	ldi	r24, 0xB1	; 177
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 92 00 	call	0x124	; 0x124 <printm>

	sleep = GetChar();		//get sleep choice
 270:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (sleep){
 274:	82 33       	cpi	r24, 0x32	; 50
 276:	11 f1       	breq	.+68     	; 0x2bc <sleepOptions+0x6c>
 278:	8d 36       	cpi	r24, 0x6D	; 109
 27a:	09 f4       	brne	.+2      	; 0x27e <sleepOptions+0x2e>
 27c:	3b c0       	rjmp	.+118    	; 0x2f4 <sleepOptions+0xa4>
 27e:	81 33       	cpi	r24, 0x31	; 49
 280:	09 f0       	breq	.+2      	; 0x284 <sleepOptions+0x34>
 282:	3f c0       	rjmp	.+126    	; 0x302 <sleepOptions+0xb2>
		case '1':
			printm("\n\rPress hardware button to wake");
 284:	82 ec       	ldi	r24, 0xC2	; 194
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	9e e4       	ldi	r25, 0x4E	; 78
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <sleepOptions+0x40>
 294:	00 c0       	rjmp	.+0      	; 0x296 <sleepOptions+0x46>
 296:	00 00       	nop
			_delay_ms(10);
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);	//set sleep mode to 'sleep'
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	81 7f       	andi	r24, 0xF1	; 241
 29c:	86 60       	ori	r24, 0x06	; 6
 29e:	83 bf       	out	0x33, r24	; 51
			sleep_mode();		//enter 'sleep' mode
 2a0:	83 b7       	in	r24, 0x33	; 51
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	83 bf       	out	0x33, r24	; 51
 2a6:	88 95       	sleep
 2a8:	83 b7       	in	r24, 0x33	; 51
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	83 bf       	out	0x33, r24	; 51
 2ae:	8f ec       	ldi	r24, 0xCF	; 207
 2b0:	97 e0       	ldi	r25, 0x07	; 7
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <sleepOptions+0x62>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <sleepOptions+0x68>
 2b8:	00 00       	nop
 2ba:	08 95       	ret
			_delay_ms(1);
			break;
		case '2':
			printm("\n\rPress hardware button to wake");
 2bc:	82 ec       	ldi	r24, 0xC2	; 194
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 92 00 	call	0x124	; 0x124 <printm>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <sleepOptions+0x78>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <sleepOptions+0x7e>
 2ce:	00 00       	nop
			_delay_ms(10);
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//set sleep mode to 'power down'
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	81 7f       	andi	r24, 0xF1	; 241
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	83 bf       	out	0x33, r24	; 51
			sleep_mode();		//enter 'power down' mode
 2d8:	83 b7       	in	r24, 0x33	; 51
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	83 bf       	out	0x33, r24	; 51
 2de:	88 95       	sleep
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	8f ec       	ldi	r24, 0xCF	; 207
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <sleepOptions+0x9a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <sleepOptions+0xa0>
 2f0:	00 00       	nop
 2f2:	08 95       	ret
			_delay_ms(1);
			break;
		case 'm':
			state = mainMenu;	//goto main menu
 2f4:	88 ef       	ldi	r24, 0xF8	; 248
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 2fc:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 300:	08 95       	ret
		default:
			printm("\n\rError, not an available option\n");	//print error
 302:	8f e5       	ldi	r24, 0x5F	; 95
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 92 00 	call	0x124	; 0x124 <printm>
 30a:	08 95       	ret

0000030c <LEDControl>:

void LEDControl()	//LED menu
{
	unsigned char led;		//LED menu choice

	printm("\n\rLED CONTROL:");		//print LED menu
 30c:	82 ee       	ldi	r24, 0xE2	; 226
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<1> LED on");		//always on option
 314:	81 ef       	ldi	r24, 0xF1	; 241
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<2> More LED options");		//more options
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<3> LED brightness options");	//PWM options
 324:	87 e1       	ldi	r24, 0x17	; 23
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<m> Main menu");
 32c:	81 eb       	ldi	r24, 0xB1	; 177
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	
	led = GetChar();			//get LED choice
 334:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (led){
 338:	82 33       	cpi	r24, 0x32	; 50
 33a:	81 f0       	breq	.+32     	; 0x35c <LEDControl+0x50>
 33c:	18 f4       	brcc	.+6      	; 0x344 <LEDControl+0x38>
 33e:	81 33       	cpi	r24, 0x31	; 49
 340:	31 f0       	breq	.+12     	; 0x34e <LEDControl+0x42>
 342:	21 c0       	rjmp	.+66     	; 0x386 <LEDControl+0x7a>
 344:	83 33       	cpi	r24, 0x33	; 51
 346:	89 f0       	breq	.+34     	; 0x36a <LEDControl+0x5e>
 348:	8d 36       	cpi	r24, 0x6D	; 109
 34a:	b1 f0       	breq	.+44     	; 0x378 <LEDControl+0x6c>
 34c:	1c c0       	rjmp	.+56     	; 0x386 <LEDControl+0x7a>
		case '1':
			state = LEDOn;		//goto LEDOn state
 34e:	88 ec       	ldi	r24, 0xC8	; 200
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 356:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 35a:	08 95       	ret
		case '2':
			state = MoreLEDOptions;	//goto MoreLEDOptions state
 35c:	8b e6       	ldi	r24, 0x6B	; 107
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 364:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 368:	08 95       	ret
		case '3':
			state = LEDBrightness;	//goto LEDBrightness state
 36a:	8f ee       	ldi	r24, 0xEF	; 239
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 372:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 376:	08 95       	ret
		case 'm':
			state = mainMenu;	//goto main menu
 378:	88 ef       	ldi	r24, 0xF8	; 248
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 380:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 384:	08 95       	ret
		default:
			printm("\n\rError, not an available option\n");	//print error
 386:	8f e5       	ldi	r24, 0x5F	; 95
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 92 00 	call	0x124	; 0x124 <printm>
 38e:	08 95       	ret

00000390 <LEDOn>:

void LEDOn()		//LED always on menu
{
	unsigned char off;		//LED off choice

	DDRD |= (1<<LEDPort);	//LED on
 390:	56 9a       	sbi	0x0a, 6	; 10

	printm("\n\rTurn LED Off?:");	//print LED off menu
 392:	85 e3       	ldi	r24, 0x35	; 53
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<y> yes");
 39a:	86 e4       	ldi	r24, 0x46	; 70
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<n> no");
 3a2:	81 e5       	ldi	r24, 0x51	; 81
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	0e 94 92 00 	call	0x124	; 0x124 <printm>

	off = GetChar();		//get LED off choice
 3aa:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (off){
 3ae:	8e 36       	cpi	r24, 0x6E	; 110
 3b0:	51 f0       	breq	.+20     	; 0x3c6 <LEDOn+0x36>
 3b2:	89 37       	cpi	r24, 0x79	; 121
 3b4:	79 f4       	brne	.+30     	; 0x3d4 <LEDOn+0x44>
		case 'y':
			DDRD &= ~(1<<LEDPort);	//LED off
 3b6:	56 98       	cbi	0x0a, 6	; 10
			state = LEDControl;		//goto LEDControl state
 3b8:	86 e8       	ldi	r24, 0x86	; 134
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 3c0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 3c4:	08 95       	ret
		case 'n':
			state = LEDControl;		//goto LEDControl state
 3c6:	86 e8       	ldi	r24, 0x86	; 134
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 3ce:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 3d2:	08 95       	ret
		default:
			printm("\n\rError, not an available option\n");	//print error
 3d4:	8f e5       	ldi	r24, 0x5F	; 95
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 92 00 	call	0x124	; 0x124 <printm>
 3dc:	08 95       	ret

000003de <LEDBrightness>:
	free(t);	//free memory of input buffer
	free(r);	//free memory of input buffer
}

void LEDBrightness()	//Brightness adjustment menu
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
	unsigned char led;		//brightness choice
	unsigned char *t = (unsigned char*) malloc(sizeof(char)*8);//custom brightness choice
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <malloc>
 3ea:	ec 01       	movw	r28, r24

	DDRD |= (1<<LEDPort);	//turn on LED
 3ec:	56 9a       	sbi	0x0a, 6	; 10

	printm("\n\rLED brightness Options:");	//print brightness menu
 3ee:	8b e5       	ldi	r24, 0x5B	; 91
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<1> Low");
 3f6:	85 e7       	ldi	r24, 0x75	; 117
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<2> Medium");
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<3> High");
 406:	8e e8       	ldi	r24, 0x8E	; 142
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<4> Custom");
 40e:	8a e9       	ldi	r24, 0x9A	; 154
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<b> Back");
 416:	88 ea       	ldi	r24, 0xA8	; 168
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<m> Main menu");
 41e:	81 eb       	ldi	r24, 0xB1	; 177
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	
	led = GetChar();		//get LED choice
 426:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (led){
 42a:	83 33       	cpi	r24, 0x33	; 51
 42c:	99 f0       	breq	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42e:	28 f4       	brcc	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 430:	81 33       	cpi	r24, 0x31	; 49
 432:	51 f0       	breq	.+20     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 434:	82 33       	cpi	r24, 0x32	; 50
 436:	59 f0       	breq	.+22     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 438:	39 c0       	rjmp	.+114    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 43a:	82 36       	cpi	r24, 0x62	; 98
 43c:	49 f1       	breq	.+82     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 43e:	8d 36       	cpi	r24, 0x6D	; 109
 440:	71 f1       	breq	.+92     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 442:	84 33       	cpi	r24, 0x34	; 52
 444:	99 f5       	brne	.+102    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 446:	09 c0       	rjmp	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		case '1':
			OCR0A = 26;		//set 10% duty cycle
 448:	8a e1       	ldi	r24, 0x1A	; 26
 44a:	87 bd       	out	0x27, r24	; 39
			break;
 44c:	33 c0       	rjmp	.+102    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case '2':
			OCR0A = 128;	//set 50% duty cycle
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	87 bd       	out	0x27, r24	; 39
			break;
 452:	30 c0       	rjmp	.+96     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case '3':
			OCR0A = 230;	//set 90% duty cycle
 454:	86 ee       	ldi	r24, 0xE6	; 230
 456:	87 bd       	out	0x27, r24	; 39
			break;
 458:	2d c0       	rjmp	.+90     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case '4':
			printm("\n\rHow bright would you like the LED? (0 - 99)");
 45a:	84 eb       	ldi	r24, 0xB4	; 180
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			printm("\n\rPress Enter after input: ");
 462:	82 ee       	ldi	r24, 0xE2	; 226
 464:	92 e0       	ldi	r25, 0x02	; 2
 466:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			scanm(t);		//get LED on time
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 a8 00 	call	0x150	; 0x150 <scanm>
			OCR0A = (atoi((const char*)t)*255)/100;	//set duty cycle to custom choice
 470:	ce 01       	movw	r24, r28
 472:	0e 94 87 04 	call	0x90e	; 0x90e <atoi>
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	ac 01       	movw	r20, r24
 47a:	24 9f       	mul	r18, r20
 47c:	c0 01       	movw	r24, r0
 47e:	25 9f       	mul	r18, r21
 480:	90 0d       	add	r25, r0
 482:	11 24       	eor	r1, r1
 484:	64 e6       	ldi	r22, 0x64	; 100
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	0e 94 32 03 	call	0x664	; 0x664 <__divmodhi4>
 48c:	67 bd       	out	0x27, r22	; 39
			break;
 48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case 'b':
			state = MoreLEDOptions;		//goto MoreLEDOptions state
 490:	8b e6       	ldi	r24, 0x6B	; 107
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 498:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case 'm':
			state = mainMenu;		//goto Main menu state
 49e:	88 ef       	ldi	r24, 0xF8	; 248
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 4a6:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		default:
			printm("\n\rError, not an available option\n");	//print error
 4ac:	8f e5       	ldi	r24, 0x5F	; 95
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			break;
	}
	free(t);	//free memory of input buffer
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 ef 03 	call	0x7de	; 0x7de <free>
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <delay_ms>:
 #include <avr/sleep.h>
 #include "ioe.h"
 #include "states.h"

 void delay_ms(int n) {		//dynamic delay function
	 while(n--) {
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	41 f0       	breq	.+16     	; 0x4d4 <delay_ms+0x14>
 4c4:	ef ec       	ldi	r30, 0xCF	; 207
 4c6:	f7 e0       	ldi	r31, 0x07	; 7
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <delay_ms+0x8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <delay_ms+0xe>
 4ce:	00 00       	nop
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	c1 f7       	brne	.-16     	; 0x4c4 <delay_ms+0x4>
 4d4:	08 95       	ret

000004d6 <MoreLEDOptions>:
			break;
	}
}

void MoreLEDOptions()	//More LED Options menu
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
	unsigned char led;		//LED menu choice
	unsigned char *t = (unsigned char *) malloc(sizeof(char)*8);		//custom brightness choice
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <malloc>
 4e2:	ec 01       	movw	r28, r24

	printm("\n\rMore LED Options:");		//print LED menu
 4e4:	8e ef       	ldi	r24, 0xFE	; 254
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<1> LED always on");		//always on option
 4ec:	82 e1       	ldi	r24, 0x12	; 18
 4ee:	93 e0       	ldi	r25, 0x03	; 3
 4f0:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<2> LED blink once");		//blink once option
 4f4:	87 e2       	ldi	r24, 0x27	; 39
 4f6:	93 e0       	ldi	r25, 0x03	; 3
 4f8:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<3> LED blink function");	//periodic blink options
 4fc:	8d e3       	ldi	r24, 0x3D	; 61
 4fe:	93 e0       	ldi	r25, 0x03	; 3
 500:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<b> Back");
 504:	88 ea       	ldi	r24, 0xA8	; 168
 506:	92 e0       	ldi	r25, 0x02	; 2
 508:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\r\t<m> Main menu");
 50c:	81 eb       	ldi	r24, 0xB1	; 177
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	
	led = GetChar();			//get LED choice
 514:	0e 94 82 00 	call	0x104	; 0x104 <GetChar>
	switch (led){
 518:	83 33       	cpi	r24, 0x33	; 51
 51a:	31 f1       	breq	.+76     	; 0x568 <MoreLEDOptions+0x92>
 51c:	28 f4       	brcc	.+10     	; 0x528 <MoreLEDOptions+0x52>
 51e:	81 33       	cpi	r24, 0x31	; 49
 520:	41 f0       	breq	.+16     	; 0x532 <MoreLEDOptions+0x5c>
 522:	82 33       	cpi	r24, 0x32	; 50
 524:	69 f0       	breq	.+26     	; 0x540 <MoreLEDOptions+0x6a>
 526:	35 c0       	rjmp	.+106    	; 0x592 <MoreLEDOptions+0xbc>
 528:	82 36       	cpi	r24, 0x62	; 98
 52a:	29 f1       	breq	.+74     	; 0x576 <MoreLEDOptions+0xa0>
 52c:	8d 36       	cpi	r24, 0x6D	; 109
 52e:	51 f1       	breq	.+84     	; 0x584 <MoreLEDOptions+0xae>
 530:	30 c0       	rjmp	.+96     	; 0x592 <MoreLEDOptions+0xbc>
		case '1':
			state = LEDOn;		//goto LEDOn state
 532:	88 ec       	ldi	r24, 0xC8	; 200
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 53a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 53e:	2d c0       	rjmp	.+90     	; 0x59a <MoreLEDOptions+0xc4>
		case '2':
			DDRD &= ~(1<<LEDPort);	//LED off
 540:	56 98       	cbi	0x0a, 6	; 10
			printm("\n\rHow long would you like the LED to blink in ms?");
 542:	87 e5       	ldi	r24, 0x57	; 87
 544:	93 e0       	ldi	r25, 0x03	; 3
 546:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			printm("\n\rPress Enter after input: ");
 54a:	82 ee       	ldi	r24, 0xE2	; 226
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			scanm(t);				//get LED on time
 552:	ce 01       	movw	r24, r28
 554:	0e 94 a8 00 	call	0x150	; 0x150 <scanm>
			DDRD |= (1<<LEDPort);	//LED on
 558:	56 9a       	sbi	0x0a, 6	; 10
			delay_ms(atoi((const char*)t));		//delay based on user input
 55a:	ce 01       	movw	r24, r28
 55c:	0e 94 87 04 	call	0x90e	; 0x90e <atoi>
 560:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay_ms>
			DDRD &= ~(1<<LEDPort);	//LED off
 564:	56 98       	cbi	0x0a, 6	; 10
			break;
 566:	19 c0       	rjmp	.+50     	; 0x59a <MoreLEDOptions+0xc4>
		case '3':
			state = LEDBlinkFunc;	//goto LEDBlinkFunc state
 568:	83 ed       	ldi	r24, 0xD3	; 211
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 570:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 574:	12 c0       	rjmp	.+36     	; 0x59a <MoreLEDOptions+0xc4>
		case 'b':
			state = LEDControl;		//goto LEDControl state
 576:	86 e8       	ldi	r24, 0x86	; 134
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 57e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 582:	0b c0       	rjmp	.+22     	; 0x59a <MoreLEDOptions+0xc4>
		case 'm':
			state = mainMenu;		//goto Main menu state
 584:	88 ef       	ldi	r24, 0xF8	; 248
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 58c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
			break;
 590:	04 c0       	rjmp	.+8      	; 0x59a <MoreLEDOptions+0xc4>
		default:
			printm("\n\rError, not an available option\n");	//print error
 592:	8f e5       	ldi	r24, 0x5F	; 95
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 92 00 	call	0x124	; 0x124 <printm>
			break;
	}
	free(t);	//free memory of input buffer
 59a:	ce 01       	movw	r24, r28
 59c:	0e 94 ef 03 	call	0x7de	; 0x7de <free>
}
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <LEDBlinkFunc>:

void LEDBlinkFunc()		//Blink LED function
{
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
	unsigned char *t = (unsigned char *) malloc(sizeof(char)*8);		//custom brightness choice
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <malloc>
 5ba:	8c 01       	movw	r16, r24
	unsigned char *r = (unsigned char *) malloc(sizeof(char)*8);		//custom brightness choice
 5bc:	88 e0       	ldi	r24, 0x08	; 8
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <malloc>
 5c4:	7c 01       	movw	r14, r24

	DDRD &= ~(1<<LEDPort);	//LED off
 5c6:	56 98       	cbi	0x0a, 6	; 10
	printm("\n\rThis option repeatedly blinks the LED?");
 5c8:	89 e8       	ldi	r24, 0x89	; 137
 5ca:	93 e0       	ldi	r25, 0x03	; 3
 5cc:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\rHow long would you like the LED to blink in ms?");
 5d0:	87 e5       	ldi	r24, 0x57	; 87
 5d2:	93 e0       	ldi	r25, 0x03	; 3
 5d4:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\rPress Enter after input: ");
 5d8:	82 ee       	ldi	r24, 0xE2	; 226
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	scanm(t);				//get LED on time
 5e0:	c8 01       	movw	r24, r16
 5e2:	0e 94 a8 00 	call	0x150	; 0x150 <scanm>
	printm("\n\rHow frequently would you like the LED to blink in ms?");
 5e6:	82 eb       	ldi	r24, 0xB2	; 178
 5e8:	93 e0       	ldi	r25, 0x03	; 3
 5ea:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	printm("\n\rPress Enter after input: ");
 5ee:	82 ee       	ldi	r24, 0xE2	; 226
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	scanm(r);				//get repeat time
 5f6:	c7 01       	movw	r24, r14
 5f8:	0e 94 a8 00 	call	0x150	; 0x150 <scanm>
	printm("\n\rPress any key to stop");
 5fc:	8a ee       	ldi	r24, 0xEA	; 234
 5fe:	93 e0       	ldi	r25, 0x03	; 3
 600:	0e 94 92 00 	call	0x124	; 0x124 <printm>
	while (!(UCSR0A & (1<<RXC0))){		//wait for input
 604:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 608:	88 23       	and	r24, r24
 60a:	8c f0       	brlt	.+34     	; 0x62e <LEDBlinkFunc+0x88>
 60c:	c0 ec       	ldi	r28, 0xC0	; 192
 60e:	d0 e0       	ldi	r29, 0x00	; 0
		DDRD |= (1<<LEDPort);	//LED on
 610:	56 9a       	sbi	0x0a, 6	; 10
		delay_ms(atoi((const char*)t));		//delay based on user input
 612:	c8 01       	movw	r24, r16
 614:	0e 94 87 04 	call	0x90e	; 0x90e <atoi>
 618:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay_ms>
		DDRD &= ~(1<<LEDPort);	//LED off
 61c:	56 98       	cbi	0x0a, 6	; 10
		delay_ms(atoi((const char*)r));		//delay based on user input
 61e:	c7 01       	movw	r24, r14
 620:	0e 94 87 04 	call	0x90e	; 0x90e <atoi>
 624:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay_ms>
	scanm(t);				//get LED on time
	printm("\n\rHow frequently would you like the LED to blink in ms?");
	printm("\n\rPress Enter after input: ");
	scanm(r);				//get repeat time
	printm("\n\rPress any key to stop");
	while (!(UCSR0A & (1<<RXC0))){		//wait for input
 628:	98 81       	ld	r25, Y
 62a:	99 23       	and	r25, r25
 62c:	8c f7       	brge	.-30     	; 0x610 <LEDBlinkFunc+0x6a>
		DDRD |= (1<<LEDPort);	//LED on
		delay_ms(atoi((const char*)t));		//delay based on user input
		DDRD &= ~(1<<LEDPort);	//LED off
		delay_ms(atoi((const char*)r));		//delay based on user input
	}
	UCSR0B &= ~(1<<RXEN0);		//flush receive flag
 62e:	e1 ec       	ldi	r30, 0xC1	; 193
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	8f 7e       	andi	r24, 0xEF	; 239
 636:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0);		//reset receive interrupt
 638:	80 81       	ld	r24, Z
 63a:	80 61       	ori	r24, 0x10	; 16
 63c:	80 83       	st	Z, r24
	state = MoreLEDOptions;		//goto MoreLEDOptions state
 63e:	8b e6       	ldi	r24, 0x6B	; 107
 640:	92 e0       	ldi	r25, 0x02	; 2
 642:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <__data_end+0x1>
 646:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
	free(t);	//free memory of input buffer
 64a:	c8 01       	movw	r24, r16
 64c:	0e 94 ef 03 	call	0x7de	; 0x7de <free>
	free(r);	//free memory of input buffer
 650:	c7 01       	movw	r24, r14
 652:	0e 94 ef 03 	call	0x7de	; 0x7de <free>
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	08 95       	ret

00000664 <__divmodhi4>:
 664:	97 fb       	bst	r25, 7
 666:	07 2e       	mov	r0, r23
 668:	16 f4       	brtc	.+4      	; 0x66e <__divmodhi4+0xa>
 66a:	00 94       	com	r0
 66c:	07 d0       	rcall	.+14     	; 0x67c <__divmodhi4_neg1>
 66e:	77 fd       	sbrc	r23, 7
 670:	09 d0       	rcall	.+18     	; 0x684 <__divmodhi4_neg2>
 672:	0e 94 46 03 	call	0x68c	; 0x68c <__udivmodhi4>
 676:	07 fc       	sbrc	r0, 7
 678:	05 d0       	rcall	.+10     	; 0x684 <__divmodhi4_neg2>
 67a:	3e f4       	brtc	.+14     	; 0x68a <__divmodhi4_exit>

0000067c <__divmodhi4_neg1>:
 67c:	90 95       	com	r25
 67e:	81 95       	neg	r24
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__divmodhi4_neg2>:
 684:	70 95       	com	r23
 686:	61 95       	neg	r22
 688:	7f 4f       	sbci	r23, 0xFF	; 255

0000068a <__divmodhi4_exit>:
 68a:	08 95       	ret

0000068c <__udivmodhi4>:
 68c:	aa 1b       	sub	r26, r26
 68e:	bb 1b       	sub	r27, r27
 690:	51 e1       	ldi	r21, 0x11	; 17
 692:	07 c0       	rjmp	.+14     	; 0x6a2 <__udivmodhi4_ep>

00000694 <__udivmodhi4_loop>:
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	a6 17       	cp	r26, r22
 69a:	b7 07       	cpc	r27, r23
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <__udivmodhi4_ep>
 69e:	a6 1b       	sub	r26, r22
 6a0:	b7 0b       	sbc	r27, r23

000006a2 <__udivmodhi4_ep>:
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	5a 95       	dec	r21
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__udivmodhi4_loop>
 6aa:	80 95       	com	r24
 6ac:	90 95       	com	r25
 6ae:	bc 01       	movw	r22, r24
 6b0:	cd 01       	movw	r24, r26
 6b2:	08 95       	ret

000006b4 <malloc>:
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	82 30       	cpi	r24, 0x02	; 2
 6ba:	91 05       	cpc	r25, r1
 6bc:	10 f4       	brcc	.+4      	; 0x6c2 <malloc+0xe>
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	e0 91 06 04 	lds	r30, 0x0406	; 0x800406 <__flp>
 6c6:	f0 91 07 04 	lds	r31, 0x0407	; 0x800407 <__flp+0x1>
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
 6d2:	30 97       	sbiw	r30, 0x00	; 0
 6d4:	11 f1       	breq	.+68     	; 0x71a <malloc+0x66>
 6d6:	40 81       	ld	r20, Z
 6d8:	51 81       	ldd	r21, Z+1	; 0x01
 6da:	48 17       	cp	r20, r24
 6dc:	59 07       	cpc	r21, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <malloc+0x5c>
 6e0:	48 17       	cp	r20, r24
 6e2:	59 07       	cpc	r21, r25
 6e4:	61 f4       	brne	.+24     	; 0x6fe <malloc+0x4a>
 6e6:	82 81       	ldd	r24, Z+2	; 0x02
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	20 97       	sbiw	r28, 0x00	; 0
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <malloc+0x40>
 6ee:	9b 83       	std	Y+3, r25	; 0x03
 6f0:	8a 83       	std	Y+2, r24	; 0x02
 6f2:	2b c0       	rjmp	.+86     	; 0x74a <malloc+0x96>
 6f4:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <__flp+0x1>
 6f8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__flp>
 6fc:	26 c0       	rjmp	.+76     	; 0x74a <malloc+0x96>
 6fe:	21 15       	cp	r18, r1
 700:	31 05       	cpc	r19, r1
 702:	19 f0       	breq	.+6      	; 0x70a <malloc+0x56>
 704:	42 17       	cp	r20, r18
 706:	53 07       	cpc	r21, r19
 708:	18 f4       	brcc	.+6      	; 0x710 <malloc+0x5c>
 70a:	9a 01       	movw	r18, r20
 70c:	be 01       	movw	r22, r28
 70e:	df 01       	movw	r26, r30
 710:	ef 01       	movw	r28, r30
 712:	02 80       	ldd	r0, Z+2	; 0x02
 714:	f3 81       	ldd	r31, Z+3	; 0x03
 716:	e0 2d       	mov	r30, r0
 718:	dc cf       	rjmp	.-72     	; 0x6d2 <malloc+0x1e>
 71a:	21 15       	cp	r18, r1
 71c:	31 05       	cpc	r19, r1
 71e:	09 f1       	breq	.+66     	; 0x762 <malloc+0xae>
 720:	28 1b       	sub	r18, r24
 722:	39 0b       	sbc	r19, r25
 724:	24 30       	cpi	r18, 0x04	; 4
 726:	31 05       	cpc	r19, r1
 728:	90 f4       	brcc	.+36     	; 0x74e <malloc+0x9a>
 72a:	12 96       	adiw	r26, 0x02	; 2
 72c:	8d 91       	ld	r24, X+
 72e:	9c 91       	ld	r25, X
 730:	13 97       	sbiw	r26, 0x03	; 3
 732:	61 15       	cp	r22, r1
 734:	71 05       	cpc	r23, r1
 736:	21 f0       	breq	.+8      	; 0x740 <malloc+0x8c>
 738:	fb 01       	movw	r30, r22
 73a:	93 83       	std	Z+3, r25	; 0x03
 73c:	82 83       	std	Z+2, r24	; 0x02
 73e:	04 c0       	rjmp	.+8      	; 0x748 <malloc+0x94>
 740:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <__flp+0x1>
 744:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__flp>
 748:	fd 01       	movw	r30, r26
 74a:	32 96       	adiw	r30, 0x02	; 2
 74c:	44 c0       	rjmp	.+136    	; 0x7d6 <malloc+0x122>
 74e:	fd 01       	movw	r30, r26
 750:	e2 0f       	add	r30, r18
 752:	f3 1f       	adc	r31, r19
 754:	81 93       	st	Z+, r24
 756:	91 93       	st	Z+, r25
 758:	22 50       	subi	r18, 0x02	; 2
 75a:	31 09       	sbc	r19, r1
 75c:	2d 93       	st	X+, r18
 75e:	3c 93       	st	X, r19
 760:	3a c0       	rjmp	.+116    	; 0x7d6 <malloc+0x122>
 762:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
 766:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
 76a:	23 2b       	or	r18, r19
 76c:	41 f4       	brne	.+16     	; 0x77e <malloc+0xca>
 76e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 772:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 776:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__brkval+0x1>
 77a:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <__brkval>
 77e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 782:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 786:	21 15       	cp	r18, r1
 788:	31 05       	cpc	r19, r1
 78a:	41 f4       	brne	.+16     	; 0x79c <malloc+0xe8>
 78c:	2d b7       	in	r18, 0x3d	; 61
 78e:	3e b7       	in	r19, 0x3e	; 62
 790:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 794:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 798:	24 1b       	sub	r18, r20
 79a:	35 0b       	sbc	r19, r21
 79c:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <__brkval>
 7a0:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <__brkval+0x1>
 7a4:	e2 17       	cp	r30, r18
 7a6:	f3 07       	cpc	r31, r19
 7a8:	a0 f4       	brcc	.+40     	; 0x7d2 <malloc+0x11e>
 7aa:	2e 1b       	sub	r18, r30
 7ac:	3f 0b       	sbc	r19, r31
 7ae:	28 17       	cp	r18, r24
 7b0:	39 07       	cpc	r19, r25
 7b2:	78 f0       	brcs	.+30     	; 0x7d2 <malloc+0x11e>
 7b4:	ac 01       	movw	r20, r24
 7b6:	4e 5f       	subi	r20, 0xFE	; 254
 7b8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ba:	24 17       	cp	r18, r20
 7bc:	35 07       	cpc	r19, r21
 7be:	48 f0       	brcs	.+18     	; 0x7d2 <malloc+0x11e>
 7c0:	4e 0f       	add	r20, r30
 7c2:	5f 1f       	adc	r21, r31
 7c4:	50 93 05 04 	sts	0x0405, r21	; 0x800405 <__brkval+0x1>
 7c8:	40 93 04 04 	sts	0x0404, r20	; 0x800404 <__brkval>
 7cc:	81 93       	st	Z+, r24
 7ce:	91 93       	st	Z+, r25
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <malloc+0x122>
 7d2:	e0 e0       	ldi	r30, 0x00	; 0
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	cf 01       	movw	r24, r30
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <free>:
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	09 f4       	brne	.+2      	; 0x7ec <free+0xe>
 7ea:	8c c0       	rjmp	.+280    	; 0x904 <__stack+0x5>
 7ec:	fc 01       	movw	r30, r24
 7ee:	32 97       	sbiw	r30, 0x02	; 2
 7f0:	13 82       	std	Z+3, r1	; 0x03
 7f2:	12 82       	std	Z+2, r1	; 0x02
 7f4:	00 91 06 04 	lds	r16, 0x0406	; 0x800406 <__flp>
 7f8:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <__flp+0x1>
 7fc:	01 15       	cp	r16, r1
 7fe:	11 05       	cpc	r17, r1
 800:	81 f4       	brne	.+32     	; 0x822 <free+0x44>
 802:	20 81       	ld	r18, Z
 804:	31 81       	ldd	r19, Z+1	; 0x01
 806:	82 0f       	add	r24, r18
 808:	93 1f       	adc	r25, r19
 80a:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
 80e:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
 812:	28 17       	cp	r18, r24
 814:	39 07       	cpc	r19, r25
 816:	79 f5       	brne	.+94     	; 0x876 <free+0x98>
 818:	f0 93 05 04 	sts	0x0405, r31	; 0x800405 <__brkval+0x1>
 81c:	e0 93 04 04 	sts	0x0404, r30	; 0x800404 <__brkval>
 820:	71 c0       	rjmp	.+226    	; 0x904 <__stack+0x5>
 822:	d8 01       	movw	r26, r16
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	ae 17       	cp	r26, r30
 82a:	bf 07       	cpc	r27, r31
 82c:	50 f4       	brcc	.+20     	; 0x842 <free+0x64>
 82e:	12 96       	adiw	r26, 0x02	; 2
 830:	2d 91       	ld	r18, X+
 832:	3c 91       	ld	r19, X
 834:	13 97       	sbiw	r26, 0x03	; 3
 836:	ad 01       	movw	r20, r26
 838:	21 15       	cp	r18, r1
 83a:	31 05       	cpc	r19, r1
 83c:	09 f1       	breq	.+66     	; 0x880 <free+0xa2>
 83e:	d9 01       	movw	r26, r18
 840:	f3 cf       	rjmp	.-26     	; 0x828 <free+0x4a>
 842:	9d 01       	movw	r18, r26
 844:	da 01       	movw	r26, r20
 846:	33 83       	std	Z+3, r19	; 0x03
 848:	22 83       	std	Z+2, r18	; 0x02
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	86 0f       	add	r24, r22
 850:	97 1f       	adc	r25, r23
 852:	82 17       	cp	r24, r18
 854:	93 07       	cpc	r25, r19
 856:	69 f4       	brne	.+26     	; 0x872 <free+0x94>
 858:	ec 01       	movw	r28, r24
 85a:	28 81       	ld	r18, Y
 85c:	39 81       	ldd	r19, Y+1	; 0x01
 85e:	26 0f       	add	r18, r22
 860:	37 1f       	adc	r19, r23
 862:	2e 5f       	subi	r18, 0xFE	; 254
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	31 83       	std	Z+1, r19	; 0x01
 868:	20 83       	st	Z, r18
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	9b 81       	ldd	r25, Y+3	; 0x03
 86e:	93 83       	std	Z+3, r25	; 0x03
 870:	82 83       	std	Z+2, r24	; 0x02
 872:	45 2b       	or	r20, r21
 874:	29 f4       	brne	.+10     	; 0x880 <free+0xa2>
 876:	f0 93 07 04 	sts	0x0407, r31	; 0x800407 <__flp+0x1>
 87a:	e0 93 06 04 	sts	0x0406, r30	; 0x800406 <__flp>
 87e:	42 c0       	rjmp	.+132    	; 0x904 <__stack+0x5>
 880:	13 96       	adiw	r26, 0x03	; 3
 882:	fc 93       	st	X, r31
 884:	ee 93       	st	-X, r30
 886:	12 97       	sbiw	r26, 0x02	; 2
 888:	ed 01       	movw	r28, r26
 88a:	49 91       	ld	r20, Y+
 88c:	59 91       	ld	r21, Y+
 88e:	9e 01       	movw	r18, r28
 890:	24 0f       	add	r18, r20
 892:	35 1f       	adc	r19, r21
 894:	e2 17       	cp	r30, r18
 896:	f3 07       	cpc	r31, r19
 898:	71 f4       	brne	.+28     	; 0x8b6 <free+0xd8>
 89a:	80 81       	ld	r24, Z
 89c:	91 81       	ldd	r25, Z+1	; 0x01
 89e:	84 0f       	add	r24, r20
 8a0:	95 1f       	adc	r25, r21
 8a2:	02 96       	adiw	r24, 0x02	; 2
 8a4:	11 96       	adiw	r26, 0x01	; 1
 8a6:	9c 93       	st	X, r25
 8a8:	8e 93       	st	-X, r24
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	13 96       	adiw	r26, 0x03	; 3
 8b0:	9c 93       	st	X, r25
 8b2:	8e 93       	st	-X, r24
 8b4:	12 97       	sbiw	r26, 0x02	; 2
 8b6:	e0 e0       	ldi	r30, 0x00	; 0
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	d8 01       	movw	r26, r16
 8bc:	12 96       	adiw	r26, 0x02	; 2
 8be:	8d 91       	ld	r24, X+
 8c0:	9c 91       	ld	r25, X
 8c2:	13 97       	sbiw	r26, 0x03	; 3
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	19 f0       	breq	.+6      	; 0x8ce <free+0xf0>
 8c8:	f8 01       	movw	r30, r16
 8ca:	8c 01       	movw	r16, r24
 8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <free+0xdc>
 8ce:	8d 91       	ld	r24, X+
 8d0:	9c 91       	ld	r25, X
 8d2:	98 01       	movw	r18, r16
 8d4:	2e 5f       	subi	r18, 0xFE	; 254
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
 8e0:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
 8e4:	28 17       	cp	r18, r24
 8e6:	39 07       	cpc	r19, r25
 8e8:	69 f4       	brne	.+26     	; 0x904 <__stack+0x5>
 8ea:	30 97       	sbiw	r30, 0x00	; 0
 8ec:	29 f4       	brne	.+10     	; 0x8f8 <free+0x11a>
 8ee:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <__flp+0x1>
 8f2:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <__flp>
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <free+0x11e>
 8f8:	13 82       	std	Z+3, r1	; 0x03
 8fa:	12 82       	std	Z+2, r1	; 0x02
 8fc:	10 93 05 04 	sts	0x0405, r17	; 0x800405 <__brkval+0x1>
 900:	00 93 04 04 	sts	0x0404, r16	; 0x800404 <__brkval>
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <atoi>:
 90e:	fc 01       	movw	r30, r24
 910:	88 27       	eor	r24, r24
 912:	99 27       	eor	r25, r25
 914:	e8 94       	clt
 916:	21 91       	ld	r18, Z+
 918:	20 32       	cpi	r18, 0x20	; 32
 91a:	e9 f3       	breq	.-6      	; 0x916 <atoi+0x8>
 91c:	29 30       	cpi	r18, 0x09	; 9
 91e:	10 f0       	brcs	.+4      	; 0x924 <atoi+0x16>
 920:	2e 30       	cpi	r18, 0x0E	; 14
 922:	c8 f3       	brcs	.-14     	; 0x916 <atoi+0x8>
 924:	2b 32       	cpi	r18, 0x2B	; 43
 926:	41 f0       	breq	.+16     	; 0x938 <atoi+0x2a>
 928:	2d 32       	cpi	r18, 0x2D	; 45
 92a:	39 f4       	brne	.+14     	; 0x93a <atoi+0x2c>
 92c:	68 94       	set
 92e:	04 c0       	rjmp	.+8      	; 0x938 <atoi+0x2a>
 930:	0e 94 a5 04 	call	0x94a	; 0x94a <__mulhi_const_10>
 934:	82 0f       	add	r24, r18
 936:	91 1d       	adc	r25, r1
 938:	21 91       	ld	r18, Z+
 93a:	20 53       	subi	r18, 0x30	; 48
 93c:	2a 30       	cpi	r18, 0x0A	; 10
 93e:	c0 f3       	brcs	.-16     	; 0x930 <atoi+0x22>
 940:	1e f4       	brtc	.+6      	; 0x948 <atoi+0x3a>
 942:	90 95       	com	r25
 944:	81 95       	neg	r24
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	08 95       	ret

0000094a <__mulhi_const_10>:
 94a:	7a e0       	ldi	r23, 0x0A	; 10
 94c:	97 9f       	mul	r25, r23
 94e:	90 2d       	mov	r25, r0
 950:	87 9f       	mul	r24, r23
 952:	80 2d       	mov	r24, r0
 954:	91 0d       	add	r25, r1
 956:	11 24       	eor	r1, r1
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
